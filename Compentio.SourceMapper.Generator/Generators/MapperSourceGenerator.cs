using Compentio.SourceMapper.Attributes;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Text;

namespace Compentio.SourceMapper.Generators
{
    [Generator]
    public class MapperSourceGenerator : ISourceGenerator
    {
        public void Execute(GeneratorExecutionContext context)
        {
            if (context.SyntaxReceiver is null)
            {
                throw new ArgumentNullException(nameof(context), "context.SyntaxReceiver could not be null");
            }

            var receiver = (MappersSyntaxReceiver)context.SyntaxReceiver;

            foreach (var interfaceDeclaration in receiver.Candidates)
            {
                var model = context.Compilation.GetSemanticModel(interfaceDeclaration.SyntaxTree, true);
                var type = model.GetDeclaredSymbol(interfaceDeclaration) as ITypeSymbol;

                if (type is null || !IsMapperInterface(type))
                    continue;

                var code = GenerateCode(type);
                context.AddSource($"{type.Name.Substring(1)}.cs", code);
            }
        }

        public void Initialize(GeneratorInitializationContext context)
        {
            //#if DEBUG
            //if (!Debugger.IsAttached)
            //{
            //    Debugger.Launch();
            //}
            //#endif
            //Debug.WriteLine("Initalize code generator");
            context.RegisterForSyntaxNotifications(() => new MappersSyntaxReceiver());
        }

        private bool IsMapperInterface(ITypeSymbol type)
        {
            return type.GetAttributes()
                       .Any(a => a.AttributeClass?.ToString() == nameof(MapperAttribute));
        }

        private static string GenerateCode(ITypeSymbol type)
        {
            var ns = type.ContainingNamespace.ToString();
            var name = type.Name.Substring(1);
            var items = GetItemNames(type);

            return @$"// <auto-generated />

            using System.Collections.Generic;

            {(string.IsNullOrWhiteSpace(ns) ? null : $"namespace {ns}")}
            {{
               partial class {name}
               {{
                  private static IReadOnlyList<{name}> _items;
                  public static IReadOnlyList<{name}> Items => _items ??= GetItems();

                  private static IReadOnlyList<{name}> GetItems()
                  {{
                     return new[] {{ {string.Join(", ", items)} }};
                  }}
               }}
            }}
            ";
        }

        private static IEnumerable<string> GetItemNames(ITypeSymbol type)
        {
            return type.GetMembers()
                       .Select(m =>
                       {
                           if (!m.IsStatic ||
                         m.DeclaredAccessibility != Accessibility.Public ||
                         m is not IFieldSymbol field)
                               return null;

                           return SymbolEqualityComparer.Default.Equals(field.Type, type)
                               ? field.Name
                               : null;
                       })
                       .Where(field => field is not null);
        }
    }
}
